from ast import Delete
from multiprocessing import connection
from tkinter import*
from tkinter import ttk
import random
import mysql.connector
from tkinter import messagebox





class Customer_Win:
    def __init__(self,root):
        self.root=root
        self.root.title("Fish shop  Management System (Customer Details)")
        self.root.geometry("1295x610+250+180")

        #VARIABLES
        self.var_ref=StringVar()
        x=random.randint(1000,9999)
        self.var_ref.set(str(x))

        self.var_cust_name=StringVar()
        self.var_mother=StringVar()
        self.var_gender=StringVar()
        self.var_post=StringVar()
        self.var_mobile=StringVar()
        self.var_email=StringVar()
        self.var_nationality=StringVar()
        self.var_address=StringVar()
        self.var_id_proof=StringVar()
        self.var_id_number=StringVar()

        #TITLE
        lbltitle=Label(self.root,text="Add Customer Details",font=("Times new roman",20,"bold","italic"),bg="black",fg="gold",relief=RIDGE)
        lbltitle.place(x=0,y=0,width=1300,height=50)

        #LABEL FRAME
        lblframeleft=LabelFrame(self.root,bd=2,relief=RIDGE,text="Customer Details",font=("times new roman",20,"bold","italic"),padx=2)
        lblframeleft.place(x=5,y=49,width=400,height=550)

        #LABELS AND ENTRY
        #CUSTOMER REFERNCE
        lblcust_ref=Label(lblframeleft,text="Customer Ref:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblcust_ref.grid(row=0,column=0,sticky=W)
        entry_ref=ttk.Entry(lblframeleft,textvariable=self.var_ref,width=20,font=("times new roman",15,"italic"),state="readonly")
        entry_ref.grid(row=0,column=1)

        #CUSTOMER NAME
        lblcname=Label(lblframeleft,text="Customer Name:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblcname.grid(row=1,column=0,sticky=W)
        textcname=ttk.Entry(lblframeleft,textvariable=self.var_cust_name,width=20,font=("times new roman",15,"italic"))
        textcname.grid(row=1,column=1)

        #MOTHER NAME
        lblmname=Label(lblframeleft,text="Mother Name:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblmname.grid(row=2,column=0,sticky=W)
        textmname=ttk.Entry(lblframeleft,textvariable=self.var_mother,width=20,font=("times new roman",15,"italic"))
        textmname.grid(row=2,column=1)

        #GENDER COMBO-BOX
        lblgender=Label(lblframeleft,text="Gender:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblgender.grid(row=3,column=0,sticky=W)
        self.combo_gender=ttk.Combobox(lblframeleft,textvariable=self.var_gender,font=("times new roman",13,"italic"),state="readonly")
        self.combo_gender["values"]=("Select","Male","Female","Other")
        self.combo_gender.grid(row=3,column=1)
        self.combo_gender.current(0)
      
        #POSTCODE
        lblpostcode=Label(lblframeleft,text="Post Code:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblpostcode.grid(row=4,column=0,sticky=W)
        textpostcode=ttk.Entry(lblframeleft,textvariable=self.var_post,width=20,font=("times new roman",15,"italic"))
        textpostcode.grid(row=4,column=1)

        #MOBILE NUMBER
        lblmobile=Label(lblframeleft,text="Mobile Number:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblmobile.grid(row=5,column=0,sticky=W)
        textmobile=ttk.Entry(lblframeleft,textvariable=self.var_mobile,width=20,font=("times new roman",15,"italic"))
        textmobile.grid(row=5,column=1)

        #EMAIL
        lblemail=Label(lblframeleft,text="Email:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblemail.grid(row=6,column=0,sticky=W)
        textemail=ttk.Entry(lblframeleft,textvariable=self.var_email,width=20,font=("times new roman",15,"italic"))
        textemail.grid(row=6,column=1)

        #NAMTIONALITY
        lblnationality=Label(lblframeleft,text="Nationality:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblnationality.grid(row=7,column=0,sticky=W)
        self.combo_nationality=ttk.Combobox(lblframeleft,textvariable=self.var_nationality,font=("times new roman",13,"italic"),state="readonly")
        self.combo_nationality["values"]=("Select","Indian","American","British")
        self.combo_nationality.grid(row=7,column=1)
        self.combo_nationality.current(0)
        

        #ID PROOF TYPE
        lblidproof=Label(lblframeleft,text="ID Proof:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblidproof.grid(row=8,column=0,sticky=W)
        self.combo_id=ttk.Combobox(lblframeleft,textvariable=self.var_id_proof,font=("times new roman",13,"italic"),state="readonly")
        self.combo_id["values"]=("Select","Adharcard","Pancard","Driving License","Passport","Voting Card")
        self.combo_id.grid(row=8,column=1)
        self.combo_id.current(0)
        

        #ID NUMBER
        lblidnumber=Label(lblframeleft,text="ID Number:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lblidnumber.grid(row=9,column=0,sticky=W)
        textidnumber=ttk.Entry(lblframeleft,textvariable=self.var_id_number,width=20,font=("times new roman",15,"italic"))
        textidnumber.grid(row=9,column=1)

        #ADDRESS
        lbladdress=Label(lblframeleft,text="Address:-",font=("times new roman",15,"bold","italic"),padx=2,pady=6)
        lbladdress.grid(row=10,column=0,sticky=W)
        textaddress=ttk.Entry(lblframeleft,textvariable=self.var_address,width=20,font=("times new roman",15,"italic"))
        textaddress.grid(row=10,column=1)

        #BUTTONS
        btn_frame=Frame(lblframeleft,bd=2,relief=RIDGE)
        btn_frame.place(x=5,y=450,width=380,height=40)

        btnAdd=Button(btn_frame,text="Add",command=self.add_data,font=("times new roman",15,"bold","italic"),bg="black",fg="gold",width=7)
        btnAdd.grid(row=0,column=0,padx=1)

        btnUpdate=Button(btn_frame,text="Update",command=self.update,font=("times new roman",15,"bold","italic"),bg="black",fg="gold",width=7)
        btnUpdate.grid(row=0,column=1,padx=1)

        btnDelete=Button(btn_frame,text="Delete",command=self.delete,font=("times new roman",15,"bold","italic"),bg="black",fg="gold",width=8)
        btnDelete.grid(row=0,column=2,padx=1)

        btnReset=Button(btn_frame,command=self.reset,text="Reset",font=("times new roman",15,"bold","italic"),bg="black",fg="gold",width=8)
        btnReset.grid(row=0,column=3,padx=1)

        #TABEL FRAME SEARCH SYSTEM
        Tabel_Frame=LabelFrame(self.root,bd=2,relief=RIDGE,text="View Details And Search System",font=("times new roman",20,"bold","italic"),padx=2)
        Tabel_Frame.place(x=410,y=49,width=900,height=550)


        #lblSearchBy=Label(Tabel_Frame,text="Search By",bg="black",fg="gold",font=("times new roman",15,"bold","italic"))
        #lblSearchBy.grid(row=0,column=0,sticky=W,padx=2,)

        #self.search_var=StringVar()
        #combo_Search=ttk.Combobox(Tabel_Frame,textvariable=self.search_var,font=("times new roman",13,"italic"),state="readonly",width=15)
        #combo_Search["values"]=("Select","Mobile","Ref")
        #combo_Search.grid(row=0,column=1)
        #combo_Search.current(0)

        #self.text_search=StringVar()
        #textSearch=ttk.Entry(Tabel_Frame,textvariable=self.text_search,width=24,font=("times new roman",15,"italic"))
        #textSearch.grid(row=0,column=2,padx=2)

        #btnSearch=Button(Tabel_Frame,command=self.search,text="Search",font=("times new roman",15,"bold","italic"),bg="black",fg="gold",width=7)
        #btnSearch.grid(row=0,column=3,padx=1)

        #btnShowAll=Button(Tabel_Frame,command=self.fetch_data,text="Show All",font=("times new roman",15,"bold","italic"),bg="black",fg="gold",width=7)
        #btnShowAll.grid(row=0,column=4,padx=1)

        #SHOW DATA TABEL

        details_tabel=Frame(Tabel_Frame,bd=2,relief=RIDGE)
        details_tabel.place(x=5,y=10,width=855,height=500)

        scroll_x=ttk.Scrollbar(details_tabel,orient=HORIZONTAL)
        scroll_y=ttk.Scrollbar(details_tabel,orient=VERTICAL)

        self.Cust_Details_Tabel=ttk.Treeview(details_tabel,columns=("Ref","Name","Mother","Gender","PostCode","Mobile","Email","Nationality","IdProof","IdNumber","Address"),xscrollcommand=scroll_x.set,yscrollcommand=scroll_y.set)
        scroll_x.pack(side=BOTTOM,fill=X)
        scroll_y.pack(side=RIGHT,fill=Y)
        scroll_x.config(command=self.Cust_Details_Tabel.xview)
        scroll_y.config(command=self.Cust_Details_Tabel.yview)

        self.Cust_Details_Tabel.heading("Ref",text="Ref")
        self.Cust_Details_Tabel.heading("Name",text="Name")
        self.Cust_Details_Tabel.heading("Mother",text="Mother")
        self.Cust_Details_Tabel.heading("Gender",text="Gender")
        self.Cust_Details_Tabel.heading("PostCode",text="PostCode")
        self.Cust_Details_Tabel.heading("Mobile",text="Mobile")
        self.Cust_Details_Tabel.heading("Email",text="Email")
        self.Cust_Details_Tabel.heading("Nationality",text="Nationality")
        self.Cust_Details_Tabel.heading("IdProof",text="IdProof")
        self.Cust_Details_Tabel.heading("IdNumber",text="IdNumber")
        self.Cust_Details_Tabel.heading("Address",text="Address")

        self.Cust_Details_Tabel["show"]="headings"


        self.Cust_Details_Tabel.column("Ref",width=100)
        self.Cust_Details_Tabel.column("Name",width=100)
        self.Cust_Details_Tabel.column("Mother",width=100)
        self.Cust_Details_Tabel.column("Gender",width=100)
        self.Cust_Details_Tabel.column("PostCode",width=100)
        self.Cust_Details_Tabel.column("Mobile",width=100)
        self.Cust_Details_Tabel.column("Email",width=100)
        self.Cust_Details_Tabel.column("Nationality",width=100)
        self.Cust_Details_Tabel.column("IdProof",width=100)
        self.Cust_Details_Tabel.column("IdNumber",width=100)
        self.Cust_Details_Tabel.column("Address",width=100)


        self.Cust_Details_Tabel.pack(fill=BOTH,expand=1)
        self.Cust_Details_Tabel.bind("<ButtonRelease-1>",self.get_cursor)
        self.fetch_data()

    def add_data(self):
        if self.var_mobile.get()==""or self.var_mother.get()=="":
            messagebox.showerror("Error","All fields are required",parent=self.root)
        else:
            try:
                conn=mysql.connector.connect(host="localhost",username="root",password="root",database="lms")
                my_cursor=conn.cursor()
                my_cursor.execute("insert into customer values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(
                                                                                    self.var_ref.get(),
                                                                                    self.var_cust_name.get(),
                                                                                    self.var_mother.get(),
                                                                                    self.var_gender.get(),
                                                                                    self.var_post.get(),
                                                                                    self.var_mobile.get(),
                                                                                    self.var_email.get(),
                                                                                    self.var_nationality.get(),
                                                                                    self.var_id_proof.get(),
                                                                                    self.var_id_number.get(),
                                                                                    self.var_address.get()
                                                                                ))
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Success","Customer has been added",parent=self.root)
            except Exception as es:
                messagebox.showwarning("Warning",f"Something went wrong:{str(es)}",parent=self.root)

    def fetch_data(self):
        conn=mysql.connector.connect(host="localhost",username="root",password="root",database="lms")
        my_cursor=conn.cursor()
        my_cursor.execute("select * from customer")
        rows=my_cursor.fetchall()
        if len(rows)!=0:
            self.Cust_Details_Tabel.delete(*self.Cust_Details_Tabel.get_children())
            for i in rows:
                self.Cust_Details_Tabel.insert("",END,values=i)
            conn.commit()
        conn.close()


    def get_cursor(self,event=""):
        cursor_row=self.Cust_Details_Tabel.focus()
        content=self.Cust_Details_Tabel.item(cursor_row)
        row=content["values"]

        self.var_ref.set(row[0]),
        self.var_cust_name.set(row[1]),
        self.var_mother.set(row[2]),
        self.var_gender.set(row[3]),
        self.var_post.set(row[4]),
        self.var_mobile.set(row[5]),
        self.var_email.set(row[6]),
        self.var_nationality.set(row[7]),
        self.var_id_proof.set(row[8]),
        self.var_id_number.set(row[9]),
        self.var_address.set(row[10])


    def update(self):
        if self.var_mobile.get()=="":
            messagebox.showerror("Error","Please Enter Mobile Number",parent=self.root)
        else:
            conn=mysql.connector.connect(host="localhost",username="root",password="root",database="lms")
            my_cursor=conn.cursor()
            my_cursor.execute("update customer set Name=%s,Mother=%s,Gender=%s,PostCode=%s,Mobile=%s,Email=%s,Nationality=%s,IdProof=%s,IdNumber=%s,Address=%s where Ref=%s",(
                                                                                                                                                    self.var_cust_name.get(),
                                                                                                                                                    self.var_mother.get(),
                                                                                                                                                    self.var_gender.get(),
                                                                                                                                                    self.var_post.get(),
                                                                                                                                                    self.var_mobile.get(),
                                                                                                                                                    self.var_email.get(),
                                                                                                                                                    self.var_nationality.get(),
                                                                                                                                                    self.var_id_proof.get(),
                                                                                                                                                    self.var_id_number.get(),
                                                                                                                                                    self.var_address.get(), 
                                                                                                                                                    self.var_ref.get()                     
                                                                                                                                                                        ))

            conn.commit()
            self.fetch_data()
            conn.close()
            messagebox.showinfo("update","Customer Details Has Been Updated Successfully!!!!....",parent=self.root)

    def delete(self):
        delete=messagebox.askyesno("Lodging Management System","Do you want delete this customer",parent=self.root)
        if delete>0:
            conn=mysql.connector.connect(host="localhost",username="root",password="root",database="lms")
            my_cursor=conn.cursor()
            query="delete from customer where Ref=%s"
            value=(self.var_ref.get(),)
            my_cursor.execute(query,value)
        else:
            if not delete:
                return
        conn.commit()
        self.fetch_data()
        conn.close()

    def reset(self):
        self.var_cust_name.set(""),
        self.var_mother.set(""),
        self.var_post.set(""),
        self.var_mobile.set(""),
        self.var_email.set(""),
        self.var_id_number.set(""),
        self.var_address.set("")
        
        x=random.randint(1000,9999)
        self.var_ref.set(str(x))


    #def search(self):
     #   conn=mysql.connector.connect(host="localhost",username="root",password="root",database="lms")
     #   my_cursor=conn.cursor()
     #   my_cursor.execute("select * from customer where "+str(self.search_var.get())+"LIKE'%"+str(self.text_search.get())+"%'")
      #  rows=my_cursor.fetchall()
       # if len (rows)!=0:
        #    self.Cust_Details_Tabel.delete(*self.Cust_Details_Tabel.get_children())
        #    for i in rows:
        #        self.Cust_Details_Tabel.insert("",END,values=i)
        #    conn.commit()
        #conn.close()


        


             

            
        





        









if __name__=="__main__":
    root=Tk()
    obj=Customer_Win(root)
    root.mainloop()
